Microsoft (R) Macro Assembler Version 14.00.24210.0	    03/31/21 17:51:13
&Is Prime, Version 1      (IsPrime.asm			     Page 1 - 1


				TITLE Is Prime, Version 1      (IsPrime.asm)
				;-----------------------------------------------
				; Chase Carroll
				; CPEN 3710
				; Mar 31, 2021
				;
				; This program determines whether a given unsigned
				; integer is a prime number or not.
				; Program executes in protected mode.
				;-----------------------------------------------
				include Irvine32.inc					; needed for access to various functions
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				;primetest PROTO :DWORD					; proto of prime testing procedure
				;MyReadInt PROTO							; modified ReadInt from Irvine, attr Dr. Dumas

 00000000			.data									; set up variables and constants to use
 00000000 00000000		value DWORD ?							; placeholder for user input
 00000004 47 6F 6F 64 62	term BYTE "Goodbye",0					; program termination text
	   79 65 00
 0000000C 45 52 52 4F 52	err BYTE "ERROR: Input negative or NaN",0 ; input error text
	   3A 20 49 6E 70
	   75 74 20 6E 65
	   67 61 74 69 76
	   65 20 6F 72 20
	   4E 61 4E 00
 00000029 45 6E 74 65 72	prompt BYTE "Enter a non-negative integer (0 to exit): ",0 ; input prompt
	   20 61 20 6E 6F
	   6E 2D 6E 65 67
	   61 74 69 76 65
	   20 69 6E 74 65
	   67 65 72 20 28
	   30 20 74 6F 20
	   65 78 69 74 29
	   3A 20 00
 00000054 20 69 73 20 61	prime BYTE " is a prime number.",0		; prime indicator text
	   20 70 72 69 6D
	   65 20 6E 75 6D
	   62 65 72 2E 00
 00000068 20 69 73 20 6E	nprime BYTE " is not a prime number; it is divisible by ",0	; non-prime indicator text
	   6F 74 20 61 20
	   70 72 69 6D 65
	   20 6E 75 6D 62
	   65 72 3B 20 69
	   74 20 69 73 20
	   64 69 76 69 73
	   69 62 6C 65 20
	   62 79 20 00
 00000094 49 6E 70 75 74	uno BYTE "Input was special non-prime value 1.",0
	   20 77 61 73 20
	   73 70 65 63 69
	   61 6C 20 6E 6F
	   6E 2D 70 72 69
	   6D 65 20 76 61
	   6C 75 65 20 31
	   2E 00
 000000B9 54 68 69 73 20	time1 BYTE "This computation took ",0	; time text 1
	   63 6F 6D 70 75
	   74 61 74 69 6F
	   6E 20 74 6F 6F
	   6B 20 00
 000000D0 20 6D 69 6C 6C	time2 BYTE " milliseconds.",0			; time text 2
	   69 73 65 63 6F
	   6E 64 73 2E 00
 000000DF 00000000		startTime DWORD ?						; placeholder for time
 000000E3 00000000		elapsedTime DWORD ?						; placeholder for time

 00000000			.code
 00000000			main		proc
 00000000			start:
 00000000  BA 00000029 R		mov		edx,offset prompt			; get prompt text
 00000005  E8 00000000 E		call	WriteString					; print prompt text
 0000000A  E8 00000166			call	MyReadInt					; get input
 0000000F  0F 82 000000E4		jc		error						; move to err if carry set
 00000015  83 F8 00			cmp		eax,0						; eax = 0 ?
 00000018  0F 84 000000EF		je		finish						; move to exit if eax = 0
 0000001E  50				push	eax							; preserve EAX
 0000001F  E8 00000000 E		call	GetMseconds					; get start time
 00000024  A3 000000DF R		mov		startTime,eax				; save time
 00000029  58				pop		eax							; restore EAX

 0000002A  A3 00000000 R		mov		value,eax					; set variable
 0000002F  FF 35 00000000 R		push	value						; push variable to stack
 00000035  E8 000000E9			call	primetest					; perform primality test
 0000003A  50				push	eax							; preserve EAX
 0000003B  E8 00000000 E		call	GetMseconds					; get stop time
 00000040  2B 05 000000DF R		sub		eax,startTime				; get elapsed time
 00000046  A3 000000E3 R		mov		elapsedTime,eax				; store elapsed time
 0000004B  58				pop		eax							; restore eax
 0000004C  83 F8 01			cmp		eax,1						; eax = 1 ?
 0000004F  0F 84 00000090		je		special						; special non-prime case
					
 00000055  83 F8 00			cmp		eax,0						; eax = 0 ?
 00000058  75 41			jnz		notprime					; no: eax not 0
 0000005A  A1 00000000 R		mov		eax,value					; get original value
 0000005F  E8 00000000 E		call	WriteDec					; print original value
 00000064  BA 00000054 R		mov		edx,offset prime			; get prime text
 00000069  E8 00000000 E		call	WriteString					; write prime text
 0000006E  E8 00000000 E		call	Crlf						; carriage return
 00000073  BA 000000B9 R		mov		edx,offset time1			; get time1 text
 00000078  A1 000000E3 R		mov		eax,elapsedTime				; get elapsed time
 0000007D  E8 00000000 E		call	WriteString					; print time text
 00000082  E8 00000000 E		call	WriteDec					; print time in milliseconds
 00000087  BA 000000D0 R		mov		edx,offset time2			; get time2 text
 0000008C  E8 00000000 E		call	WriteString					; print time2 text
 00000091  E8 00000000 E		call	Crlf						; carriage return
 00000096  E9 FFFFFF65			jmp		start						; repeat program
 0000009B			notprime:
 0000009B  8B D8			mov		ebx,eax						; preserve divisor
 0000009D  A1 00000000 R		mov		eax,value					; get original value
 000000A2  BA 00000068 R		mov		edx,offset nprime			; get not prime text
 000000A7  E8 00000000 E		call	WriteDec					; print original value
 000000AC  E8 00000000 E		call	WriteString					; print not prime text
 000000B1  8B C3			mov		eax,ebx						; get divisor
 000000B3  E8 00000000 E		call	WriteDec					; print divisor
 000000B8  E8 00000000 E		call	Crlf						; carriage return
 000000BD  BA 000000B9 R		mov		edx,offset time1			; get time1 text
 000000C2  A1 000000E3 R		mov		eax,elapsedTime				; get elapsed time
 000000C7  E8 00000000 E		call	WriteString					; print time text
 000000CC  E8 00000000 E		call	WriteDec					; print time in milliseconds
 000000D1  BA 000000D0 R		mov		edx,offset time2			; get time2 text
 000000D6  E8 00000000 E		call	WriteString					; print time2 text
 000000DB  E8 00000000 E		call	Crlf						; carriage return
 000000E0  E9 FFFFFF1B			jmp		start						; repeat program
 000000E5			special:
 000000E5  BA 00000094 R		mov		edx,offset uno				; get special text
 000000EA  E8 00000000 E		call	WriteString					; write special text
 000000EF  E8 00000000 E		call	Crlf						; carriage return
 000000F4  E9 FFFFFF07			jmp		start						; repeat program
 000000F9			error:
 000000F9  BA 0000000C R		mov		edx,offset err				; get error text
 000000FE  E8 00000000 E		call	WriteString					; write error text
 00000103  E8 00000000 E		call	Crlf						; carriage return
 00000108  E9 FFFFFEF3			jmp		start						; repeat program
 0000010D			finish:
 0000010D  BA 00000004 R		mov		edx,offset term				; get termination text
 00000112  E8 00000000 E		call	WriteString					; print termination text
 00000117  E8 00000000 E		call	Crlf						; carriage return
					exit								; invoke code to terminate the program
 0000011C  6A 00	   *	    push   +000000000h
 0000011E  E8 00000000 E   *	    call   ExitProcess
 00000123			main		endp



				;-----------------------------------------------
				; This procedure performs a prime number test.
				; RECEIVES: 1 stack parameter
				; RETURNS: EAX (status code OR divisor)
				; REQUIRES: Stack param N (unsigned DWORD decimal int)
				; MODIFIES: EAX, possibly other registers through
				; procedure calling.
				; Program executes in protected mode.
				;-----------------------------------------------
 00000123			primetest	PROC
 00000123			.code
 00000123  C8 0000 00			enter	0,0						; create stack frame
 00000127  8B 45 08			mov		eax,[ebp+8]				; value to be tested
 0000012A  83 F8 01			cmp		eax,1					; eax = 1 ?
 0000012D  74 39			je		L4						; special 1 case
 0000012F  53				push	ebx						; preserve register
 00000130  51				push	ecx						; preserve register
 00000131  52				push	edx						; preserve register
 00000132  57				push	edi						; preserve register
 00000133  83 E8 01			sub		eax,1					; account for n-1 checking
 00000136  8B C8			mov		ecx,eax					; store testing limit
 00000138  8B 45 08			mov		eax,[ebp+8]				; restore original value
 0000013B			L1:									; checking loop
 0000013B  83 F9 01			cmp		ecx,1					; ecx = 1 ?
 0000013E  74 1D			je		L2						; yes: must be prime, 1 is irrelevant
 00000140  8B D9			mov		ebx,ecx					; get divisor to be tested
 00000142  BA 00000000			mov		edx,0					; attempt to prevent strange overflow behavior
 00000147  F7 F3			div		ebx						; divide EAX by EBX, int in EAX rem in EDX
 00000149  83 FA 00			cmp		edx,0					; edx = 0 ?
 0000014C  74 16			je		L3						; yes: even divisor found
 0000014E  8B 45 08			mov		eax,[ebp+8]				; restore original value
 00000151  BB 00000000			mov		ebx,0					; zero out registers to prevent strange behavior
 00000156  BA 00000000			mov		edx,0
 0000015B  E2 DE			loop	L1						; loop until broken or ecx = 0
 0000015D			L2:									; if reached, [ebp+8] prime
 0000015D  B8 00000000			mov		eax,0
 00000162  EB 09			jmp		L5						; move to return
 00000164			L3:									; if reached, [ebp+8] not prime
 00000164  8B C1			mov		eax,ecx					; get even divisor
 00000166  EB 05			jmp		L5
 00000168  B8 00000001		L4: mov		eax,1					; special 1 case
 0000016D  5F			L5:	pop		edi
 0000016E  5A				pop		edx
 0000016F  59				pop		ecx
 00000170  5B				pop		ebx
 00000171  C9				leave							; revert base pointer from enter
 00000172  C2 0004			ret		4						; return and cleanup stack
 00000175			primetest	endp



 00000175			MyReadInt PROC uses ebx ecx edx esi
				; Modified from Irvine32.asm by Dr. Joe Dumas
				; Modified from Dr. Joe Dumas by Chase Carroll (uses L3A now)
				; Reads a 32-bit unsigned decimal integer from standard
				; input, stopping when the Enter key is pressed.
				; All valid digits occurring before a non-numeric character
				; are converted to the integer value. Leading spaces are
				; ignored, and an optional leading + sign is permitted.
				; Receives: nothing
				; Returns:  If CF=0, the integer is valid, and EAX = binary value.
				;   If CF=1, the integer is invalid and EAX = 0.
 00000175  53		   *	    push   ebx
 00000176  51		   *	    push   ecx
 00000177  52		   *	    push   edx
 00000178  56		   *	    push   esi
 000000E7			.data
 = 00000050			LMAX_DIGITS = 80
 000000E7  00000050 [		Linputarea    BYTE  LMAX_DIGITS dup(0),0
	    00
	   ] 00
 00000138 20 3C 33 32 2D	overflow_msgL BYTE  " <32-bit integer overflow>",0
	   62 69 74 20 69
	   6E 74 65 67 65
	   72 20 6F 76 65
	   72 66 6C 6F 77
	   3E 00
 00000153 20 3C 69 6E 76	invalid_msgL  BYTE  " <invalid integer>",0
	   61 6C 69 64 20
	   69 6E 74 65 67
	   65 72 3E 00
 00000166 20 3C 6E 65 67	neg_msg       BYTE  " <negative numbers not allowed>",0
	   61 74 69 76 65
	   20 6E 75 6D 62
	   65 72 73 20 6E
	   6F 74 20 61 6C
	   6C 6F 77 65 64
	   3E 00

 00000179			.code
				; Input a string of digits using ReadString.
 00000179  BA 000000E7 R		mov   edx,offset Linputarea
 0000017E  8B F2			mov   esi,edx           		; save offset in ESI
 00000180  B9 00000050			mov   ecx,LMAX_DIGITS
 00000185  E8 00000000 E		call  ReadString
 0000018A  8B C8			mov   ecx,eax           		; save length in ECX
 0000018C  83 F9 00			cmp   ecx,0            			; greater than zero?
 0000018F  75 07			jne   L1              			; yes: continue
 00000191  B8 00000000			mov   eax,0            			; no: set return value
 00000196  EB 67			jmp   L9              			; and exit
				; Skip over any leading spaces.
 00000198  8A 06		L1:	mov   al,[esi]         			; get a character from buffer
 0000019A  3C 20			cmp   al,' '          			; space character found?
 0000019C  75 06			jne   L2              			; no: check for a sign
 0000019E  46				inc   esi              			; yes: point to next char
 0000019F  E2 F7			loop  L1
 000001A1  67& E3 4C			jcxz  L8              			; quit if all spaces
				; Check for a leading sign.
 000001A4  3C 2D		L2:	cmp   al,'-'          			; minus sign found?
 000001A6  75 07			jne   L3              			; no: look for plus sign
 000001A8  BA 00000166 R		mov   edx, offset neg_msg       ; tell user negative numbers not allowed
 000001AD  EB 41		        jmp   L8
 000001AF  3C 2B		L3:	cmp   al,'+'          			; plus sign found?
					;jne   L4              			; no: must be a digit
 000001B1  75 02			jne   L3A              			; no: look for letter
 000001B3  46				inc   esi              			; yes: skip over the sign
 000001B4  49				dec   ecx              			; subtract from counter
				; Test the first digit, and exit if it is nonnumeric.
 000001B5  8A 06		L3A:mov  al,[esi]					; get first character
 000001B7  E8 00000000 E		call IsDigit					; is it a digit?
 000001BC  75 2D			jnz  L7A						; no: show error message
				; Start to convert the number.
 000001BE  B8 00000000		L4:	mov   eax,0           			; clear accumulator
 000001C3  BB 0000000A			mov   ebx,10          			; EBX is the divisor
				; Repeat loop for each digit.
 000001C8  8A 16		L5:	mov  dl,[esi]					; get character from buffer
 000001CA  80 FA 30			cmp  dl,'0'						; character < '0'?
 000001CD  72 36			jb   L10
 000001CF  80 FA 39			cmp  dl,'9'						; character > '9'?
 000001D2  77 31			ja   L10
 000001D4  83 E2 0F			and  edx,0Fh					; no: convert to binary
 000001D7  52				push edx
 000001D8  F7 E3			mul  ebx						; EDX:EAX = EAX * EBX
 000001DA  5A				pop  edx
 000001DB  70 07			jo   L6							; quit if result too big for 32 bits
 000001DD  03 C2			add  eax,edx         			; add new digit to AX
 000001DF  70 03			jo   L6							; quit if result too big for 32 bits
 000001E1  46				inc  esi              			; point to next digit
 000001E2  EB E4			jmp  L5							; get next digit
				; Carry out of 32 bits has occured, choose "integer overflow" messsage.
 000001E4  BA 00000138 R	L6:	mov  edx,OFFSET overflow_msgL
 000001E9  EB 05			jmp  L8
				; Choose "invalid integer" message.
 000001EB			L7A:
 000001EB  BA 00000153 R		mov  edx,OFFSET invalid_msgL
				; Display the error message pointed to by EDX.
 000001F0  E8 00000000 E	L8:	call WriteString
 000001F5  E8 00000000 E		call Crlf
 000001FA  B8 00000000			mov  eax,0            			; set return value to zero and exit
 000001FF  F9			L9:	stc								; set Carry flag to indicate error
					ret
 00000200  5E		   *	    pop    esi
 00000201  5A		   *	    pop    edx
 00000202  59		   *	    pop    ecx
 00000203  5B		   *	    pop    ebx
 00000204  C3		   *	    ret    00000h
 00000205  F8			L10:	clc							; clear Carry flag to indicate success
					ret
 00000206  5E		   *	    pop    esi
 00000207  5A		   *	    pop    edx
 00000208  59		   *	    pop    ecx
 00000209  5B		   *	    pop    ebx
 0000020A  C3		   *	    ret    00000h
 0000020B			MyReadInt ENDP
				end			main
Microsoft (R) Macro Assembler Version 14.00.24210.0	    03/31/21 17:51:13
&Is Prime, Version 1      (IsPrime.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000005
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 Byte
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPos  . . . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  maxWinSize . . . . . . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000186 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000020B DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ClrScr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MyReadInt  . . . . . . . . . . .	P Near	 00000175 _TEXT	Length= 00000096 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000198 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000001A4 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 000001AF _TEXT	
  L3A  . . . . . . . . . . . . .	L Near	 000001B5 _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 000001BE _TEXT	
  L5 . . . . . . . . . . . . . .	L Near	 000001C8 _TEXT	
  L6 . . . . . . . . . . . . . .	L Near	 000001E4 _TEXT	
  L7A  . . . . . . . . . . . . .	L Near	 000001EB _TEXT	
  L8 . . . . . . . . . . . . . .	L Near	 000001F0 _TEXT	
  L9 . . . . . . . . . . . . . .	L Near	 000001FF _TEXT	
  L10  . . . . . . . . . . . . .	L Near	 00000205 _TEXT	
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000123 Public STDCALL
  start  . . . . . . . . . . . .	L Near	 00000000 _TEXT	
  notprime . . . . . . . . . . .	L Near	 0000009B _TEXT	
  special  . . . . . . . . . . .	L Near	 000000E5 _TEXT	
  error  . . . . . . . . . . . .	L Near	 000000F9 _TEXT	
  finish . . . . . . . . . . . .	L Near	 0000010D _TEXT	
primetest  . . . . . . . . . . .	P Near	 00000123 _TEXT	Length= 00000052 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000013B _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 0000015D _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 00000164 _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 00000168 _TEXT	
  L5 . . . . . . . . . . . . . .	L Near	 0000016D _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
LMAX_DIGITS  . . . . . . . . . .	Number	 00000050h   
Linputarea . . . . . . . . . . .	Byte	 000000E7 _DATA	
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
NULL . . . . . . . . . . . . . .	Number	 00000000h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
elapsedTime  . . . . . . . . . .	DWord	 000000E3 _DATA	
err  . . . . . . . . . . . . . .	Byte	 0000000C _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
invalid_msgL . . . . . . . . . .	Byte	 00000153 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
neg_msg  . . . . . . . . . . . .	Byte	 00000166 _DATA	
nprime . . . . . . . . . . . . .	Byte	 00000068 _DATA	
overflow_msgL  . . . . . . . . .	Byte	 00000138 _DATA	
prime  . . . . . . . . . . . . .	Byte	 00000054 _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000029 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
startTime  . . . . . . . . . . .	DWord	 000000DF _DATA	
term . . . . . . . . . . . . . .	Byte	 00000004 _DATA	
time1  . . . . . . . . . . . . .	Byte	 000000B9 _DATA	
time2  . . . . . . . . . . . . .	Byte	 000000D0 _DATA	
uno  . . . . . . . . . . . . . .	Byte	 00000094 _DATA	
value  . . . . . . . . . . . . .	DWord	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
